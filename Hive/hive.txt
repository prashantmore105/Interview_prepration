----------------------data types in hive-------------------------------

TINYINT
INT
SMALLINT
BIGINT

VARCHAR
CHAR

TIMESTAMP
DATE

DECIMAL(PRECISION,SCALE)

UNIONTYPE<int, double, array<string>, struct<a:int,b:string>>


----------------------DATABASE-----------------------------------------

CREATE DATABASE|SCHEMA [IF NOT EXISTS] <database name>;

SHOW DATABASES;


--------------------JDBC PROGRAM TO CONNECT HIVE FROM JAVA CODE---------------


import java.sql.SQLException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.DriverManager;

public class HiveCreateDb {
   private static String driverName = "org.apache.hadoop.hive.jdbc.HiveDriver";
   
   public static void main(String[] args) throws SQLException {
      // Register driver and create driver instance
   
      Class.forName(driverName);
      // get connection
      
      Connection con = DriverManager.getConnection("jdbc:hive://localhost:10000/default", "", "");
      Statement stmt = con.createStatement();
      
      stmt.executeQuery("CREATE DATABASE userdb");
      System.out.println(“Database userdb created successfully.”);
      
      con.close();
   }
}


javac createtable.java
javacreatetable
-----------------------------drop database-------------------------------------

DROP DATABASE StatementDROP (DATABASE|SCHEMA) [IF EXISTS] database_name 
[RESTRICT|CASCADE];

cascade will drop all tables before dropping database


-------------------------create table------------------------------------

CREATE TABLE IF NOT EXISTS employee ( eid int, name String,
salary String, destination String)
COMMENT ‘Employee details’
ROW FORMAT DELIMITED
FIELDS TERMINATED BY ‘\t’
LINES TERMINATED BY ‘\n’
STORED AS TEXTFILE;


----------------------loading data in managed table------------------------------------
LOAD DATA LOCAL INPATH '/home/user/sample.txt'
OVERWRITE INTO TABLE employee;

----------------------Alter Table------------------------------------------

ALTER TABLE name RENAME TO new_name
ALTER TABLE name ADD COLUMNS (col_spec[, col_spec ...])
ALTER TABLE name DROP [COLUMN] column_name
ALTER TABLE name CHANGE column_name new_name new_type
ALTER TABLE name REPLACE COLUMNS (col_spec[, col_spec ...])

ALTER TABLE employee RENAME TO emp;

To change datatype


hive> ALTER TABLE employee CHANGE name ename String;
hive> ALTER TABLE employee CHANGE salary salary Double;

To add column

ALTER TABLE employee ADD COLUMNS ( 
dept STRING COMMENT 'Department name');

To change column name

ALTER TABLE employee ADD COLUMNS ( 
dept STRING COMMENT 'Department name');


-------------------Drop table------------------------------------

DROP TABLE IF EXISTS employee;


------------------Adding Partitions-------------------------

 ALTER TABLE employee
> ADD PARTITION (year=’2012’)
> location '/2012/part2012';

------------------renaming partition---------------------
ALTER TABLE employee PARTITION (year=’1203’)
   > RENAME TO PARTITION (Yoj=’1203’);
   
-----------------Dropping a partition---------------------
ALTER TABLE employee DROP [IF EXISTS]
   > PARTITION (year=’1203’);
   

---------------operators--------------------------------
SELECT * FROM employee WHERE Salary>40000 && Dept=TP;

-----------frequently used functions--------------
min,max,avg,count(*),sum,round,floor

-----------Hive Views-----------------------------
CREATE VIEW emp_30000 AS
SELECT * FROM employee
WHERE salary>30000;

DROP VIEW view_name;


----------Indexing-------------------

------------------------Groupby and order by-------------------------
SELECT [ALL | DISTINCT] select_expr, select_expr, ... 
FROM table_reference 
[WHERE where_condition] 
[GROUP BY col_list] 
[HAVING having_condition] 
[ORDER BY col_list]] 
[LIMIT number];

need practice on having and order by asc and desc

----------------joins--------------------------------------
SELECT c.ID, c.NAME, o.AMOUNT, o.DATE 
FROM CUSTOMERS c 
LEFT OUTER JOIN ORDERS o 
ON (c.ID = o.CUSTOMER_ID);

types of joins:
join
left outer join
right outer join
full outer join


------------serde------------------------

------------default hive location-------------------
hdfs://namenode_server/user/hive/warehouse

psedodistributed mode

collection datatypes
array map struct


to use unix shell commands in hive use "!"

.hiverc file

default field delimiter are \001,\002,\003

what is schema on read

show databases like P

srict mode does not allow users to query without where clause to avoid long run time

ALTER TABLE table_name
CHANGE COLUMN new_col  INT
BEFORE x_col


archiving doesnt save space but creates less files for namenode to manage


Enable offline clause to stop partition from being queried  -
https://studywithswati.wordpress.com/2020/06/19/no_drop-and-offline-in-hive/


INSERT OVERWRITE TABLE employees
PARTITION (country, state)
SELECT ..., se.cnty, se.st
FROM staged_employees se;


hive.exec.mode.local.auto to avoid mapreduce

like and rlike  -  rlike allows advanced functions like  "street rlike .*(ABC|123).*


what is cartesian join and why its not possible in hive - one row of 1 table will join with all rows of another table

in a join query take smallest table at first position and largest table at last position

use of distributed by in hive - similiar to clustering


to convert string in float - select cast(price as FLOAT)

hive view cannot have insert or load functionality


/*streamtable(table_name)*/
it will load table in memory before execution to improve performance





